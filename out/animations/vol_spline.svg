<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 100" preserveAspectRatio="none">
  <style>
    .spline {
      fill: none;
      stroke: white;
      stroke-width: 0.5;
    }
    .dot {
      fill: white;
      transition: cx 0.2s ease-in-out, cy 0.2s ease-in-out; /* Smooth dot transitions */
    }
  </style>

  <!-- Background -->
  <rect width="100%" height="100%" fill="rgb(25, 25, 25)" />

  <!-- Initial convex spline -->
  <path class="spline" d="M 0 20 C 50 90, 150 90, 200 20" />

  <!-- Container for dots -->
  <g class="dots"></g>

  <script type="application/ecmascript">
    <![CDATA[
      (function () {
        const svgDoc = document.currentScript.ownerDocument;
        const spline = svgDoc.querySelector('.spline');
        const dotsContainer = svgDoc.querySelector('.dots');

        // Original positions for endpoints and control points
        const originalPoints = {
          x0: 5, y0: 20, // Start point
          x1: 50, y1: 90, // First control point
          x2: 150, y2: 90, // Second control point
          x3: 195, y3: 20, // End point
        };

        // Current positions and velocities of all points (only Y values change)
        const state = {
          current: { ...originalPoints },
          velocity: { y0: 0, y1: 0, y2: 0, y3: 0 },
          target: { ...originalPoints },
        };

        // Function to generate new target Y values with noise
        function generateTargets() {
          state.target = {
            ...state.target, // Keep X values constant
            y0: originalPoints.y0 + (Math.random() - 0.5) * 20, // Small vertical wiggle
            y1: originalPoints.y1 + (Math.random() - 0.5) * 40, // Larger vertical wiggle
            y2: originalPoints.y2 + (Math.random() - 0.5) * 40, // Larger vertical wiggle
            y3: originalPoints.y3 + (Math.random() - 0.5) * 20, // Small vertical wiggle
          };

          // Update the dots along the target spline
          updateDots();
        }

        // Function to calculate a point on a cubic BÃ©zier curve
        function calculateBezierPoint(t, p0, p1, p2, p3) {
          const x =
            Math.pow(1 - t, 3) * p0.x +
            3 * Math.pow(1 - t, 2) * t * p1.x +
            3 * (1 - t) * Math.pow(t, 2) * p2.x +
            Math.pow(t, 3) * p3.x;
          const y =
            Math.pow(1 - t, 3) * p0.y +
            3 * Math.pow(1 - t, 2) * t * p1.y +
            3 * (1 - t) * Math.pow(t, 2) * p2.y +
            Math.pow(t, 3) * p3.y;
          return { x, y };
        }

        // Function to update the dots along the spline
        function updateDots() {
          // Get target positions
          const { x0, y0, x1, y1, x2, y2, x3, y3 } = state.target;

          // Calculate 12 equally spaced points along the spline
          for (let i = 0; i <= 11; i++) {
            const t = i / 11; // Parameter from 0 to 1
            const point = calculateBezierPoint(t, { x: x0, y: y0 }, { x: x1, y: y1 }, { x: x2, y: y2 }, { x: x3, y: y3 });

            // Either update existing dots or create new ones
            let dot = dotsContainer.children[i];
            if (!dot) {
              dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
              dot.setAttribute('class', 'dot');
              dot.setAttribute('r', 2); // Dot size
              dotsContainer.appendChild(dot);
            }

            // Update the dot's position (with smooth transition)
            dot.setAttribute('cx', point.x);
            dot.setAttribute('cy', point.y);
          }
        }

        // Function to update Y positions based on acceleration
        function updatePositions() {
          const stiffness = 0.004; // Determines acceleration strength
          const damping = 0.9; // Reduces velocity for smoother stops

          // Update each Y value
          for (const key of ['y0', 'y1', 'y2', 'y3']) {
            const acceleration =
              (state.target[key] - state.current[key]) * stiffness; // Acceleration toward target
            state.velocity[key] = state.velocity[key] * damping + acceleration; // Update velocity
            state.current[key] += state.velocity[key]; // Update position
          }

          // Construct the new path for the spline (X values remain fixed)
          const { x0, y0, x1, y1, x2, y2, x3, y3 } = state.current;
          const newPath = `M ${x0} ${y0} C ${x1} ${y1}, ${x2} ${y2}, ${x3} ${y3}`;
          spline.setAttribute('d', newPath);

          // Request the next animation frame
          requestAnimationFrame(updatePositions);
        }

        // Periodically generate new target Y values
        setInterval(generateTargets, 2000); // Update targets every 2 seconds

        // Start the animation
        generateTargets();
        updatePositions();
      })();
    ]]>
  </script>
</svg>
